// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/sms/send-verify-sms": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "top description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "簡訊相關"
                ],
                "summary": "發送驗證碼",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default( Base {Add access token here} )",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Required =\u003e All\u003cbr\u003ecountryCode:'+886'\u003cbr\u003eVerifyType:1:註冊2:忘記密碼",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.DocSmsSendVerifySms"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{data\":{},\"msg\":\"success msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{data\":{},\"msg\":\"error msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/transaction/mpg-response": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "支付相關"
                ],
                "summary": "藍星回應",
                "parameters": [
                    {
                        "description": "Required =\u003e All",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.DocMpgResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"data\":{},\"msg\":\"success\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{data\":{},\"msg\":\"error msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/transaction/save-point": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "支付相關"
                ],
                "summary": "儲值(串接藍星)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default( Base {Add access token here} )",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Required =\u003e All",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.DocTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"data\":{\"aesCode\":\"\", \"sha256Code\": \"\"},\"msg\":\"success\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{data\":{},\"msg\":\"error msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users/info": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "會員相關"
                ],
                "summary": "取得使用者資訊",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default( Base {Add access token here} )",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Required =\u003e All",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.DocUsersInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"data\":{ \"Id\": \"Id\", \"LineToken\": \"Line token\", \"Picture\": \"大頭貼\", \"Name\": \"名字\", \"Phone\": \"電話\", \"CountryCode\": \"區碼\", \"CreatedAt\": \"建立時間\", \"UpdatedAt\": \"更新時間\" },\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{data\":{},\"msg\":\"error msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/users/sign-up": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "top description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "會員相關"
                ],
                "summary": "會員綁定",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default( Base {Add access token here} )",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Required =\u003e All",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.DocUsersSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{data\":{},\"msg\":\"success msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{data\":{},\"msg\":\"error msg\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/webhook/callback": {
            "post": {
                "tags": [
                    "Line相關"
                ],
                "summary": "LineWebHook事件",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "docs.DocMpgResponse": {
            "type": "object",
            "properties": {
                "lineToken": {
                    "type": "string"
                }
            }
        },
        "docs.DocSmsSendVerifySms": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "verifyType": {
                    "type": "integer"
                }
            }
        },
        "docs.DocTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "lineToken": {
                    "type": "string"
                },
                "merchantID": {
                    "type": "string"
                }
            }
        },
        "docs.DocUsersInfo": {
            "type": "object",
            "properties": {
                "lineToken": {
                    "type": "string"
                }
            }
        },
        "docs.DocUsersSignUp": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "lineToken": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "verifyCode": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
